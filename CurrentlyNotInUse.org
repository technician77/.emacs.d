* Current
** Custom Fuctions
*** DOS EOL-Removal
#+BEGIN_SRC emacs-lisp
  (defun my-dos-eol-removal ()
    "Do not show ^M in files containing mixed UNIX and DOS line endings."
    (interactive)
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^M []))
#+END_SRC
** Packages
*** Built-in
**** LPR Printing
Drucker muss vorher in Windows freigegeben werden, geht nicht anders
#+BEGIN_SRC emacs-lisp
  (use-package lpr
  :ensure nil
  :custom
  (printer-name "//Office/Samsung_M2835DW")
  (lpr-switches '("-w80"))
#+END_SRC
**** Profiler
Use profiler to find slowdowns.
- First execute profiler-start RET RET (the second RET is to confirm cpu-usage profiling)
- Provoke slowdown behaviour
- Execute profiler-report
- When finished execute profiler stop
#+BEGIN_SRC emacs-lisp
  (use-package profiler
    :bind
    (("s-x p r"  . profiler-report)
     ("s-x p 1"  . profiler-start)
     ("s-x p 0"  . profiler-stop)))
#+END_SRC
**** Uniquify
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :ensure nil
    :custom
    (setq uniquify-min-dir-content 999))
#+END_SRC
**** Winner
#+BEGIN_SRC emacs-lisp
  (use-package winner
    :ensure nil
    :bind
    (("<s-kp-subtract>" . winner-undo)
     ("<s-kp-add>" . winner-redo))
    :config
    (winner-mode))
#+END_SRC
*** Manual
**** Searcheverything
#+BEGIN_SRC emacs-lisp
  (use-package searcheverything
    :ensure nil
    :custom
    (searcheverything-cli-path "C:\\!Software\\Portable\\Searcheverything\\es.exe"))
#+END_SRC
*** External
**** Ace-Window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind
     ("<f7> s" . ace-swap-window)
    :custom-face
    (aw-leading-char-face ((nil :foreground "#ff8c00"))))
#+END_SRC
**** AES
#+BEGIN_SRC emacs-lisp
  (use-package aes)
#+END_SRC
**** Annotate
(Incompatible with org-mode source code blocks)
#+BEGIN_SRC emacs-lisp
  (use-package annotate)
#+END_SRC
**** Apache-Mode
#+BEGIN_SRC emacs-lisp
  (use-package apache-mode)
#+END_SRC
**** Auto-Update
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-delete-old-versions t)
    (auto-package-update-interval 4)
    :config
    (auto-package-update-maybe))
#+END_SRC
**** BBDB
***** BBDB
#+BEGIN_SRC emacs-lisp
  (use-package bbdb)
#+END_SRC
***** BBDB-VCard
#+BEGIN_SRC emacs-lisp
  (use-package bbdb-vcard)
#+END_SRC
***** Counsel-BBDB
#+BEGIN_SRC emacs-lisp
  (use-package counsel-bbdb)
#+END_SRC
**** Blimp+EImp
(Not yet working with emacs 27)
#+BEGIN_SRC emacs-lisp
  (use-package blimp
   :hook
   (image-mode . blimp-mode))
  (use-package eimp
   :custom
   (eimp-enable-undo t))
#+END_SRC
**** Centered-Window-Mode
#+BEGIN_SRC emacs-lisp
  (use-package centered-window)
#+END_SRC
**** Cheatsheet
#+BEGIN_SRC emacs-lisp
  (use-package cheatsheet
   :commands
   (cheatsheet-show)
   :config
   (cheatsheet-add :group 'Misc
                   :key "C-x u"
                   :description "Show the undo-tree")
   (cheatsheet-add :group 'Misc
                   :key "M-y"
                   :description "Counsel-yank-pop a.k.a. Show the kill-ring")
   (cheatsheet-add :group 'Org
                   :key "C-c c"
                   :description "Org Capture")
   (cheatsheet-add :group 'Org
                   :key "C-c r"
                   :description "Org sort"))
#+END_SRC
**** Chronos
#+BEGIN_SRC emacs-lisp
  (use-package chronos
    :bind
    (("<f8> i" . chronos-initialize)
     ("<f8> a" . chronos-add-timer)
     ("<f8> b" . my-chronos-bufferswitch))
    :config
    (defun my-chronos-bufferswitch ()
      (interactive)
      (switch-to-buffer "*chronos*")))
#+END_SRC
**** Command-Log-Mode
#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode
    :bind
    ("C-H-l" . clm/toggle-command-log-buffer))
#+END_SRC
**** Company
***** Company-Quickhelp
#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp
    :config
    (company-quickhelp-mode))
#+END_SRC
**** Company-Box
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :hook
    (company-mode . company-box-mode)
    :config
    (company-box-mode))
#+END_SRC
**** Counsel
***** Counsel-etags
#+BEGIN_SRC emacs-lisp
  (use-package counsel-etags
    :bind
    (("s-t ." . counsel-etags-find-tag-at-point)
     ("s-t g" . counsel-etags-grep-symbol-at-point)
     ("s-t f" . counsel-etags-find-tag)))
#+END_SRC
***** Counsel-Org-Clock
#+BEGIN_SRC emacs-lisp
  (use-package counsel-org-clock
    :bind
    (("H-c h" . counsel-org-clock-history)
     ("H-c c" . counsel-org-clock-context)))
#+END_SRC
**** Crux
#+BEGIN_SRC emacs-lisp
    (use-package crux
      :bind
      ("S-s-<SPC> j" . crux-top-join-line)
      ("S-s-<SPC> <up>" . crux-smart-open-line-above)
      ("S-s-<SPC> <down>" . crux-smart-open-line)
      ("S-s-<SPC> a" . crux-move-beginning-of-line)
      ("S-s-<SPC> s" . crux-create-scratch-buffer)
      ("S-s-<SPC> d" . crux-duplicate-current-line-or-region)
      ("S-s-<SPC> D" . crux-delete-file-and-buffer)
      ("S-s-<SPC> f" . crux-recentf-find-file)
      ("S-s-<SPC> r" . crux-rename-buffer-and-file))
#+END_SRC
**** CSV-Mode
#+BEGIN_SRC emacs-lisp
  (use-package csv-mode
    :custom
    (csv-separators '("," ";"))
    :mode
    ("\\.csv\\'" . csv-mode))
#+END_SRC
**** Dash
#+BEGIN_SRC emacs-lisp
  (use-package dash
   :config
   (dash-enable-font-lock))
#+END_SRC
**** Diff-HL
#+BEGIN_SRC emacs-lisp
  (use-package diff-hl
    :hook
    (prog-mode . turn-on-diff-hl-mode)
    (undo-propose-mode . turn-on-diff-hl-mode)
    (vc-dir-mode . turn-on-diff-hl-mode)
    (dired-mode . diff-hl-dired-mode))
#+END_SRC
**** DiredFL
#+BEGIN_SRC emacs-lisp
  (use-package diredfl
    :commands
    (dired)
    :hook
    (dired-mode . diredfl-mode))
#+END_SRC
**** Dired
***** Hacks-Core
#+BEGIN_SRC emacs-lisp
  (use-package dired-hacks-utils
    :commands
    (dired))
#+END_SRC
***** Narrow
#+BEGIN_SRC emacs-lisp
  (use-package dired-narrow
    :commands
    (dired)
    :bind
    (
    :map dired-mode-map
    ("s-n" . dired-narrow)))
#+END_SRC
***** Subtree
#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :bind
    (
    :map dired-mode-map
    ("<tab>" . dired-subtree-toggle)
    ("<C-tab>" . dired-subtree-cycle)))
#+END_SRC
***** W32-Browser
#+BEGIN_SRC emacs-lisp
  (use-package w32-browser
    :bind
    (
    :map dired-mode-map
    ("b" . dired-w32-browser)
    ("z" . dired-w32explore)))
#+END_SRC
***** Peep-Dired
#+BEGIN_SRC emacs-lisp
  (use-package peep-dired
    :custom
    (peep-dired-cleanup-on-disable t))
#+END_SRC
***** Custom Functions
****** Open in external app by Xah
#+BEGIN_SRC emacs-lisp
  (defun my-open-in-external-app (&optional @fname)
    "Open the current file or dired marked files in external app. The app is chosen from your OS's preference. When called in emacs lisp, if @fname is given, open that. URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html' Version 2019-11-04"
    (interactive)
    (let* (
           ($file-list
            (if @fname
                (progn (list @fname))
              (if (string-equal major-mode "dired-mode")
                  (dired-get-marked-files)
                (list (buffer-file-name)))))
           ($do-it-p (if (<= (length $file-list) 5)
                         t
                       (y-or-n-p "Open more than 5 files? "))))
      (when $do-it-p
        (cond
         ((string-equal system-type "windows-nt")
          (mapc
           (lambda ($fpath)
             (w32-shell-execute "open" $fpath)) $file-list))
         ((string-equal system-type "darwin")
          (mapc
           (lambda ($fpath)
             (shell-command
              (concat "open " (shell-quote-argument $fpath))))  $file-list))
         ((string-equal system-type "gnu/linux")
          (mapc
           (lambda ($fpath) (let ((process-connection-type nil))
                              (start-process "" nil "xdg-open" $fpath))) $file-list))))))
#+END_SRC
****** Show-in-Desktop by Xah
#+BEGIN_SRC emacs-lisp
(defun my-show-in-desktop ()
  "Show current file in desktop.
 (Mac Finder, Windows Explorer, Linux file manager)
 This command can be called when in a file or in `dired'.

URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2019-11-04"
  (interactive)
  (let (($path (if (buffer-file-name) (buffer-file-name) default-directory )))
    (cond
     ((string-equal system-type "windows-nt")
      (w32-shell-execute "open" default-directory))
     ((string-equal system-type "darwin")
      (if (eq major-mode 'dired-mode)
          (let (($files (dired-get-marked-files )))
            (if (eq (length $files) 0)
                (shell-command (concat "open " default-directory))
              (shell-command (concat "open -R " (shell-quote-argument (car (dired-get-marked-files )))))))
        (shell-command
         (concat "open -R " $path))))
     ((string-equal system-type "gnu/linux")
      (let (
            (process-connection-type nil)
            (openFileProgram (if (file-exists-p "/usr/bin/gvfs-open")
                                 "/usr/bin/gvfs-open"
                               "/usr/bin/xdg-open")))
        (start-process "" nil openFileProgram $path))
      ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. eg with nautilus
      ))))
#+END_SRC
**** Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :bind
    ("s-f" . elfeed)
    :commands
    (elfeed)
    :custom
    (elfeed-feeds
     (quote ("https://www.linogate.de/de/download/update.rss"
             "https://investors.avaya.com/rss/pressrelease.aspx"
             "https://investors.avaya.com/rss/event.aspx"
             "https://investors.avaya.com/rss/presentation.aspx"
             ))
     nil nil))
#+END_SRC
**** Emojify
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :custom
    (emojify-display-style 'image)
    :config
    (global-emojify-mode))
#+END_SRC
**** Engine-Mode
#+BEGIN_SRC emacs-lisp
  (use-package engine-mode
    :config
    (engine/set-keymap-prefix (kbd "<f12> g"))
    (defengine github
      "https://github.com/search?ref=simplesearch&q=%s"
      :keybinding "t"
      :docstring "Searching Github")
    (defengine google
      "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
      :keybinding "g"
      :docstring "Searching Google")
    (defengine rfcs
      "https://datatracker.ietf.org/doc/rfc%s"
      :keybinding "r"
      :docstring "Searching RFCs")
    (defengine stack-overflow
      "https://stackoverflow.com/search?q=%s"
      :keybinding "s"
      :docstring "Searching Stack-Overflow")
    (defengine wikipedia
      "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
      :keybinding "w"
      :docstring "Searching Wikipedia")
    (engine-mode))
#+END_SRC
**** Evil
***** Evil-Nerd-Commenter
Despite the name is does not require evil mode
#+BEGIN_SRC emacs-lisp
  (use-package evil-nerd-commenter
    :bind
    (("s-e c" . evilnc-copy-to-line)
     ("s-e k" . evilnc-kill-to-line)
     ("s-e q" . evilnc-quick-comment-or-uncomment-to-the-line)
     ("s-e l" . evilnc-copy-and-comment-lines)
     ("s-e o" . evilnc-copy-and-comment-operator)
     ("s-e i" . evilnc-toggle-invert-comment-line-by-line)
     ("s-e p" . evilnc-comment-or-uncomment-paragraphs)
     ("s-e <SPC>" . evilnc-comment-or-uncomment-lines)
     ("s-e r" . comment-or-uncomment-region)))
#+END_SRC
**** Eyebrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :custom
    (eyebrowse-keymap-prefix [?\H-e])
    (eyebrowse-wrap-around t)
    (eyebrowse-switch-back-and-forth t)
    :config
    (eyebrowse-mode))
#+END_SRC
**** Filetags
Evaluate risk on SMB-Drives before using it.
#+BEGIN_SRC emacs-lisp
  (use-package filetags)
#+END_SRC
**** Fireplace
#+BEGIN_SRC emacs-lisp
  (use-package fireplace)
#+END_SRC
**** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :commands
    (flycheck-mode)
    :hook
    (prog-mode . flycheck-mode))   
#+END_SRC
**** Folding
#+BEGIN_SRC emacs-lisp
  (use-package folding
    :config
    (folding-install-hooks)
    (folding-add-to-marks-list 'org-mode ";{{{" ";}}}" nil t)
    (folding-mode))
#+END_SRC
;{{{
 example for org-mode
;}}}
**** Fontawesome
#+BEGIN_SRC emacs-lisp
  (use-package fontawesome)
#+END_SRC
**** Free-Keys
#+BEGIN_SRC emacs-lisp
  (use-package free-keys
    :bind
    ("<f12> f" . free-keys)
    :custom
    (free-keys-modifiers '("" "C" "M" "C-M" "S" "C-S" "H" "C-H" "s" "s-H")))
#+END_SRC
**** Git-Timemachine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine) 
#+END_SRC
**** Gnuplot
Required for org-babel to display gnuplot graphics.
As of now, Version gnuplot-20191212.1801 requires a manual fix on windows:
In (defun gnuplot-send-string-to-gnuplot (string text)
...
replace (comint-send-input) by (comint-send-input nil 1)
then byte-compile-file gnuplot.el
NOT APPLYING THE FIX WILL RESULT EMACS TO FREEZE WHEN PLOTTING!
#+BEGIN_SRC emacs-lisp
  (use-package gnuplot) 
#+END_SRC
**** Helpful
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :bind
    (("<f1> f" . helpful-callable)
     ("<f1> v" . helpful-variable)
     ("<f1> k" . helpful-key)
     ("<f1> ." . helpful-at-point)))
#+END_SRC
**** Hercules
#+BEGIN_SRC emacs-lisp
  (use-package hercules
    :config
    (hercules-def
     :show-funs #'pdf-view-mode
     :keymap 'pdf-view-mode-map
     :flatten t
     :transient t)
    (global-set-key (kbd "<f7>") #'pdf-view-mode))
#+END_SRC
**** Htmlize
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC
**** Hydra
***** Global
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :config
    (global-set-key (kbd "s-o")))
#+END_SRC
***** Hydra-Org-Clock
#+BEGIN_SRC emacs-lisp
 (defhydra hydra-org-clock (:color amaranth :quit-key "q")
    "    Org-Clock"
    ("q" nil "quit" :column "Clock")
    ("c" org-clock-cancel "cancel active clock" :column "Do")
    ("d" org-clock-display "display")
    ("e" org-clock-modify-effort-estimate "effort")
    ("g" org-clock-goto "goto most recent clock")
    ("i" org-clock-in "in")
    ("o" org-clock-out "out")
    ("r" org-clock-report "report"))
#+END_SRC
***** Hydra-Window
#+BEGIN_SRC emacs-lisp
 (defhydra hydra-window (:color amaranth)
   "window"
   ("<left>" windmove-left)
   ("<down>" windmove-down)
   ("<up>" windmove-up)
   ("<right>" windmove-right)
   ("V" (lambda ()
          (interactive)
          (split-window-right)
          (windmove-right))
    "Split-vertical")
   ("X" (lambda ()
          (interactive)
          (split-window-below)
          (windmove-down))
    "Split-horzizontal")
   ("M-<left>" shrink-window-horizontally)
   ("M-<right>" enlarge-window-horizontally)
   ("M-<down>" shrink-window)
   ("M-<up>" enlarge-window)
   ("a" ace-window "ace-select")
   ("s" ace-swap-window "ace-swap")
   ("d" ace-delete-window "ace-delete")
   ("b" ivy-switch-buffer "ivy-switch-buffer")
   ("o" delete-other-windows "delete-other" :color blue)
   ("i" ace-maximize-window "ace-delete-other-windows" :color blue)
   ("q" nil "cancel"))
#+END_SRC
***** Hydra-Ibuffer
#+BEGIN_SRC emacs-lisp
(defhydra hydra-ibuffer-main (:color pink :hint nil)
  "
 ^Navigation^ | ^Mark^        | ^Actions^        | ^View^
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
  _k_:    ʌ   | _m_: mark     | _D_: delete      | _g_: refresh
 _RET_: visit | _u_: unmark   | _S_: save        | _s_: sort
  _j_:    v   | _*_: specific | _a_: all actions | _/_: filter
-^----------^-+-^----^--------+-^-------^--------+-^----^-------
"
  ("j" ibuffer-forward-line)
  ("RET" ibuffer-visit-buffer :color blue)
  ("k" ibuffer-backward-line)

  ("m" ibuffer-mark-forward)
  ("u" ibuffer-unmark-forward)
  ("*" hydra-ibuffer-mark/body :color blue)

  ("D" ibuffer-do-delete)
  ("S" ibuffer-do-save)
  ("a" hydra-ibuffer-action/body :color blue)

  ("g" ibuffer-update)
  ("s" hydra-ibuffer-sort/body :color blue)
  ("/" hydra-ibuffer-filter/body :color blue)

  ("o" ibuffer-visit-buffer-other-window "other window" :color blue)
  ("q" kill-this-buffer "quit ibuffer" :color blue)
  ("." nil "toggle hydra" :color blue))

(defhydra hydra-ibuffer-mark (:color teal :columns 5
                              :after-exit (hydra-ibuffer-main/body))
  "Mark"
  ("*" ibuffer-unmark-all "unmark all")
  ("M" ibuffer-mark-by-mode "mode")
  ("m" ibuffer-mark-modified-buffers "modified")
  ("u" ibuffer-mark-unsaved-buffers "unsaved")
  ("s" ibuffer-mark-special-buffers "special")
  ("r" ibuffer-mark-read-only-buffers "read-only")
  ("/" ibuffer-mark-dired-buffers "dired")
  ("e" ibuffer-mark-dissociated-buffers "dissociated")
  ("h" ibuffer-mark-help-buffers "help")
  ("z" ibuffer-mark-compressed-file-buffers "compressed")
  ("b" hydra-ibuffer-main/body "back" :color blue))

(defhydra hydra-ibuffer-action (:color teal :columns 4
                                :after-exit
                                (if (eq major-mode 'ibuffer-mode)
                                    (hydra-ibuffer-main/body)))
  "Action"
  ("A" ibuffer-do-view "view")
  ("E" ibuffer-do-eval "eval")
  ("F" ibuffer-do-shell-command-file "shell-command-file")
  ("I" ibuffer-do-query-replace-regexp "query-replace-regexp")
  ("H" ibuffer-do-view-other-frame "view-other-frame")
  ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
  ("M" ibuffer-do-toggle-modified "toggle-modified")
  ("O" ibuffer-do-occur "occur")
  ("P" ibuffer-do-print "print")
  ("Q" ibuffer-do-query-replace "query-replace")
  ("R" ibuffer-do-rename-uniquely "rename-uniquely")
  ("T" ibuffer-do-toggle-read-only "toggle-read-only")
  ("U" ibuffer-do-replace-regexp "replace-regexp")
  ("V" ibuffer-do-revert "revert")
  ("W" ibuffer-do-view-and-eval "view-and-eval")
  ("X" ibuffer-do-shell-command-pipe "shell-command-pipe")
  ("b" nil "back"))

(defhydra hydra-ibuffer-sort (:color amaranth :columns 3)
  "Sort"
  ("i" ibuffer-invert-sorting "invert")
  ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
  ("v" ibuffer-do-sort-by-recency "recently used")
  ("s" ibuffer-do-sort-by-size "size")
  ("f" ibuffer-do-sort-by-filename/process "filename")
  ("m" ibuffer-do-sort-by-major-mode "mode")
  ("b" hydra-ibuffer-main/body "back" :color blue))

(defhydra hydra-ibuffer-filter (:color amaranth :columns 4)
  "Filter"
  ("m" ibuffer-filter-by-used-mode "mode")
  ("M" ibuffer-filter-by-derived-mode "derived mode")
  ("n" ibuffer-filter-by-name "name")
  ("c" ibuffer-filter-by-content "content")
  ("e" ibuffer-filter-by-predicate "predicate")
  ("f" ibuffer-filter-by-filename "filename")
  (">" ibuffer-filter-by-size-gt "size")
  ("<" ibuffer-filter-by-size-lt "size")
  ("/" ibuffer-filter-disable "disable")
  ("b" hydra-ibuffer-main/body "back" :color blue))
(define-key ibuffer-mode-map "." 'hydra-ibuffer-main/body)
#+END_SRC
**** Hyperbole
#+BEGIN_SRC emacs-lisp
  (use-package hyperbole
    :defer t)
#+END_SRC
**** Info-Colors
#+BEGIN_SRC emacs-lisp
  (use-package info-colors
    :hook
    (Info-selection . info-colors-fontify-node))
#+END_SRC
**** Ini-Mode
#+BEGIN_SRC emacs-lisp
  (use-package ini-mode
    :mode
    ("\\.ini\\'" . ini-mode))
#+END_SRC
**** Ivy
***** Ivy-Hydra
#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
    :after ivy
    :bind ((
            :map ivy-minibuffer-map
                 ("C-o" . hydra-ivy/body)
                 ("M-o" . ivy-dispatching-done-hydra))))
#+END_SRC
**** Kanban
#+BEGIN_SRC emacs-lisp
  (use-package kanban)
#+END_SRC
**** Latex
***** Magic Latex Buffer
#+BEGIN_SRC emacs-lisp
  (use-package magic-latex-buffer
    :mode ("\\.tex\\'" . TeX-latex-mode)
    :hook
    (LaTeX-mode . magic-latex-buffer))
#+END_SRC
***** Latex-Preview-Pane
#+BEGIN_SRC emacs-lisp
  (use-package latex-preview-pane
    :hook
    (LaTeX-mode . latex-preview-pane-mode))
#+END_SRC
**** Linum-relative
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
  :bind
  ("<f12> l" . linum-relative-toggle)
  :custom
  (linum-relative-backend 'display-line-numbers-mode))
#+END_SRC
**** Loccur
#+BEGIN_SRC emacs-lisp
  (use-package loccur
    :bind
    ("s-o l" . loccur))
#+END_SRC
**** Manage Minor Mode
#+BEGIN_SRC emacs-lisp
(use-package manage-minor-mode
  :commands
  (manage-minor-mode))
#+END_SRC
**** Markdown-Mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands
    (markdown-mode gfm-mode)
    :mode
    (("README\\.md\\'" . gfm-mode)
     ("\\.md\\'" . markdown-mode)
     ("\\.markdown\\'" . markdown-mode))
    :custom
    (markdown-command "pandoc"))
#+END_SRC
**** Multiple-Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind
    (("H-m l" . mc/edit-lines)
     ("H-m n" . mc/mark-next-like-this)
     ("H-m p" . mc/mark-previous-like-this)
     ("H-m a" . mc/mark-all-like-this)
     ("H-m m" . mc/mark-more-like-this)
     ("H-m i" . mc/insert-numbers)
     ("H-m s" . mc/sort-regions)
     ("H-m r" . mc/reverse-regions)
     ("H-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC
**** Nov.el
Requires unzip
#+BEGIN_SRC emacs-lisp
  (use-package nov
    :mode (("\\.epub\\'" . nov-mode))
    :config
    (defun my-nov-font-setup ()
      (face-remap-add-relative 'variable-pitch :family "Calibri" :height 1.3))
    :hook
    (nov-mode . my-nov-font-setup)
    :custom
    nov-text-width 80)
#+END_SRC
**** Org
***** Org-Sticky-Header
#+BEGIN_SRC emacs-lisp
(use-package org-sticky-header
  :hook
  (org-mode . org-sticky-header-mode)
  :custom 
  (org-sticky-header-full-path 'full)
  (org-sticky-header-prefix "📌: ")
  (org-sticky-header-outline-path-separator " > "))
#+END_SRC
***** Org-Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets)
#+END_SRC
***** Org-Babel-Browser
#+BEGIN_SRC emacs-lisp
 (use-package ob-browser)
#+END_SRC
***** Org-Export-Groff
#+BEGIN_SRC emacs-lisp
  (use-package ox-groff
   :ensure org-plus-contrib)
#+END_SRC
***** Org-MRU-Clock
#+BEGIN_SRC emacs-lisp
  (use-package org-mru-clock
    :bind  (
    ("H-c i" . org-mru-clock-in)
    ("H-c r" . org-mru-clock-select-recent-task))
    :custom
    (org-mru-clock-keep-formatting t)
    (org-mru-clock-how-many 100)
    (org-mru-clock-completing-read #'ivy-completing-read))
#+END_SRC
***** Org-Fancy-Priorities
#+BEGIN_SRC emacs-lisp
  (use-package org-fancy-priorities
    :custom
    (org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕"))
    :hook
    (org-mode . org-fancy-priorities-mode))
#+END_SRC
***** Org-Journal
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :bind
    (("<f8> s" . org-journal-search)
     ("<f8> f" . org-journal-open-next-entry)
     ("<f8> p" . org-journal-open-previous-entry)
     ("<f8> n" . org-journal-new-entry))
    :custom
    (org-journal-dir "~/org/org-journal/")
    (org-journal-file-format "%Y%m%d.org"))
#+END_SRC
***** Org-Kanban
#+BEGIN_SRC emacs-lisp
  (use-package org-kanban)
#+END_SRC
***** Org-Outlook
setx OUTLOOK4E C:\PROGRA~2\MICROS~1\root\Office16
#+BEGIN_SRC emacs-lisp
  (use-package org-outlook)
#+END_SRC
***** Org-Protocol
#+BEGIN_SRC emacs-lisp
  (use-package org-protocol
     :custom
     (org-capture-templates
      '(("a" "Aufgabe" entry (file+headline "~/org/notes.org" "Aufgaben ohne Zuordnung")
         "* ZU-ERLEDIGEN %?\n  %i\n  %a")
        ("j" "Journal" entry (file+olp+datetree "~/org/journal.org")
         "* ERLEDIGT %? \n:PROPERTIES:\n:Abgemeldet: Nein\n:Leistungsart:\n:END:\nCLOCK: %U--%U\n%i\n%a")
        ("n" "Notiz" entry (file+headline "~/org/notes.org" "Notizen unsortiert")
         "* %?")
        ("p" "Protocol" entry (file+headline "~/org/notes.org" "Notizen unsortiert")
         "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
        ("L" "Protocol Link" entry (file+headline "~/org/notes.org" "Notizen unsortiert")
         "* %? [[%:link][%:description]] \nCaptured On: %U")))
    :ensure nil)
#+END_SRC
***** Org-Ref
Needs further configuration!
#+BEGIN_SRC emacs-lisp
(use-package org-ref)
#+END_SRC
***** Org-Rich-Yank
#+BEGIN_SRC emacs-lisp
(use-package org-rich-yank
   :bind (
   :map org-mode-map
   ("C-M-y" . org-rich-yank)))
#+END_SRC
***** Org-Contrib
****** Org-Latex
#+BEGIN_SRC emacs-lisp
  (use-package ox-latex
    :ensure nil
    :custom
    (org-latex-listings t))
#+END_SRC
****** Ox-Beamer
 Allow for export=>beamer by placing #+latex_class: beamer in Org files
#+BEGIN_SRC emacs-lisp
  (use-package ox-beamer
    :ensure nil
    :config
    (progn
      (add-to-list 'org-latex-classes
                   '("beamer"
                     "\\documentclass[presentation]{beamer}"
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
#+END_SRC
***** Org-Download
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :bind (
    :map org-mode-map
    ("C-c n s" . org-download-screenshot)
    ("C-c n i" . org-download-image)
    ("C-c n y" . org-download-yank)
    ("C-c n e" . org-download-edit)
    ("C-c n d" . org-download-delete)
    ("C-c n r ." . org-download-rename-at-point)
    ("C-c n r f" . org-download-rename-last-file))
    :config
    (defconst my-relative-directory-org-download-screenshot "C:/!Data/home/jlange/temp/")
    :custom
    (org-download-image-dir "~/temp")
    (org-download-screenshot-file (concat my-relative-directory-org-download-screenshot "screenshot.png"))
    (org-download-screenshot-method "convert clipboard: %s"))
#+END_SRC
***** Org-Drill
#+BEGIN_SRC emacs-lisp
(use-package org-drill)
#+END_SRC
***** Org-Noter
#+BEGIN_SRC emacs-lisp
  (use-package org-noter)
#+END_SRC
***** Org-Pomodoro
#+BEGIN_SRC emacs-lisp
  (use-package org-pomodoro
    :commands
    (org-pomodoro))
#+END_SRC
***** Org-Tree-Slides
#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide
  :custom
  (org-tree-slide-breadcrumbs nil)
  (org-tree-slide-header nil)
  (org-tree-slide-slide-in-effect nil)
  (org-tree-slide-cursor-init nil)
  (org-tree-slide-modeline-display nil)
  (org-tree-slide-never-touch-face nil))
#+END_SRC
***** Org-Web-Tools
#+BEGIN_SRC emacs-lisp
(use-package org-web-tools)
#+END_SRC
***** Ox-Reveal
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :config
    (defconst my-relative-directory-org-reveal-path "file:///C:/!Data/home/jlange/org/reveal.js/")
    :custom
    (org-reveal-root (symbol-value 'my-relative-directory-org-reveal-path)))
#+END_SRC
***** Custom Functions
****** Copy-Internal-Link-to-Clipboard
#+BEGIN_SRC emacs-lisp
  (require 'anaphora)
  (defun ph/org-extract-link-no-kill ()
    "Extract the link location at point."
    (when (org-in-regexp org-bracket-link-regexp 1)
      (->
       1
       org-match-string-no-properties
       org-link-unescape)))
  (defun ph/org-extract-link ()
    "Extract the link location at point and put it on the killring."
    (interactive)
    (awhen (ph/org-extract-link-no-kill)
           (kill-new it)
           (message "Copied \"%s\"." it)))
  (define-key org-mode-map (kbd "C-c m") #'ph/org-extract-link)
#+END_SRC
***** Org-Mind-Map
#+BEGIN_SRC emacs-lisp
  (use-package ox-org
   :ensure nil)
  (use-package org-mind-map
    :requires ox-org)
#+END_SRC
**** Outshine
#+BEGIN_SRC emacs-lisp
  (use-package outshine
    :hook
    (prog-mode . outshine-mode))
#+END_SRC
**** Parrot
#+BEGIN_SRC emacs-lisp
  (use-package parrot
    :bind
    ("M-s-p" . parrot-rotate-prev-word-at-point)
    ("M-s-n" . parrot-rotate-next-word-at-point)
    :config
    (parrot-mode))
#+END_SRC
**** Powershell
#+BEGIN_SRC emacs-lisp
  (use-package powershell
  :commands
  (powershell))
#+END_SRC
**** Projectile
***** Projectile-Mode
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :bind-keymap
    ("C-s-p" . projectile-command-map)
    :custom
    (projectile-completion-system 'ivy))
#+END_SRC
***** Counsel-Projectile
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :commands
    (counsel-projectile counsel-projectile-mode))
#+END_SRC
**** Region-Occurrences Highlighter
#+BEGIN_SRC emacs-lisp
  (use-package region-occurrences-highlighter
    :hook
    (prog-mode . region-occurrences-highlighter-mode))
#+END_SRC
**** Side-Notes
#+BEGIN_SRC emacs-lisp
  (use-package side-notes
    :bind
    ("<f12> <SPC>" . side-notes-toggle-notes)
    :custom
    (side-notes-display-alist
     '((side . left)
       (window-width . 35)
       (slot . 0))))
#+END_SRC
**** Spray
#+BEGIN_SRC emacs-lisp
  (use-package spray)
#+END_SRC
**** Sysctl
#+BEGIN_SRC emacs-lisp
  (use-package sysctl)
#+END_SRC
**** TLDR - Too Long Didn't Read cheat.sh offline Repository
run tldr-update-docs before first run, wait for the download/decompression
#+BEGIN_SRC emacs-lisp
  (use-package tldr
  :commands
  (tldr tldr-mode tldr-update-docs my-tldr-only-linux my-tldr-only-osx my-tldr-only-common+linux)
  :custom
  (tldr-enabled-categories '("common" "linux" "osx"))
  :config
  (defun my-tldr-only-osx ()
    (interactive)
    (let ((tldr-enabled-categories '("osx")))
      (tldr)))
  (defun my-tldr-only-linux ()
    (interactive)
    (let ((tldr-enabled-categories '("linux")))
      (tldr)))
  (defun my-tldr-only-common+linux ()
    (interactive)
    (let ((tldr-enabled-categories '("common" "linux")))
      (tldr))))
#+END_SRC
**** Treemacs
***** Treemacs
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :bind
    ("<f7>" . treemacs)
    :custom
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-width 100))
#+END_SRC
***** Treemacs-Icons-Dired
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-icons-dired
   :after treemacs
   :config
   (dired-mode . treemacs-icons-dired-mode))
#+END_SRC
***** Treemacs-Projectile
#+BEGIN_SRC emacs-lisp
  (use-package treemacs-projectile
   :after treemacs)
#+END_SRC
**** Undo-Propose
#+BEGIN_SRC emacs-lisp
  (use-package undo-propose
    :bind 
    (("C-c _" . undo-propose)))
#+END_SRC
**** Use-Package-Hydra
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package-hydra)
  (package-refresh-contents)
  (package-install 'use-package-hydra))
  (require 'use-package-hydra)
#+END_SRC
**** Vdiff
#+BEGIN_SRC emacs-lisp
  (use-package vdiff
    :bind-keymap
    ("H-d" . vdiff-mode-prefix-map))
  (use-package vdiff-magit
   :after magit)
#+END_SRC
**** Vimish Fold
#+BEGIN_SRC emacs-lisp
  (use-package vimish-fold
    :bind
    (("<f12> v f" . vimish-fold)
     ("<f12> v d" . vimish-fold-delete)
     ("<f12> v t" . vimish-fold-toggle)
     ("<f12> v a" . vimish-fold-toggle-all))
    :config
    (vimish-fold-global-mode 1))
#+END_SRC
**** Visual Bookmarks
#+BEGIN_SRC emacs-lisp
  (use-package bm
    :bind (("<f9> r" . bm-show-all) ;; reveal
           ("<f9> n" . bm-next)
           ("<f9> p" . bm-previous)
           ("<f9> a" . bm-bookmark-annotate)
           ("<f9> t" . bm-toggle)
           ("<f9> s" . bm-save))
    :custom
    (bm-repository-file "~/.emacs.d/bm-repository")
    (bm-restore-repository-on-load t)
    (bm-cycle-all-buffers t)
    (bm-highlight-style 'bm-highlight-only-fringe)
    (bm-buffer-persistence t)
    :hook
    (find-file-hooks . bm-buffer-restore)
    (after-init . bm-repository-load))
#+END_SRC
**** Web Mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.json\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js[x]\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.xml\\'" . web-mode)))
#+END_SRC
**** Writeroom-Mode
#+BEGIN_SRC emacs-lisp
  (use-package writeroom-mode
    :bind
    ("<f12> w" . writeroom-mode))
#+END_SRC
**** WSD-mode
#+BEGIN_SRC emacs-lisp
  (use-package wsd-mode
  :commands
  (wsd-mode))
#+END_SRC
**** WTTRIN
#+BEGIN_SRC emacs-lisp
  (use-package wttrin
    :commands
    (wttrin)
    :custom
    (wttrin-default-cities '("Bielefeld" "Dusseldorf" "Hamburg" "Frankfurt" "Stuttgart" "Munchen" "Berlin"))
    (wttrin-default-accept-language '("Accept-Language" . "de-DE")))
#+END_SRC
**** Xah-find
#+BEGIN_SRC emacs-lisp
  (use-package xah-find
    :bind
    (("<f12> x f" . xah-find-text)
     ("<f12> x c" . xah-find-count)
     ("<f12> x r" . xah-find-replace-text))
    :custom-face
    (xah-find-file-path-highlight ((t :background "#4169E1" :foreground "white")))
    (xah-find-match-highlight ((t :background "#ff8c00" :foreground "white"))))
#+END_SRC
**** ZPresent
#+BEGIN_SRC emacs-lisp
  (use-package zpresent
    :commands zpresent)
#+END_SRC
**** ZTree
#+BEGIN_SRC emacs-lisp
  (use-package ztree
    :commands ztree-diff
    :custom
    (ztree-dir-move-focus t))
#+END_SRC
* WIP
*** LSP-Mode
(Not working yet, needs more testing)
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands lsp
    :hook
    (python-mode . lsp))
  (use-package lsp-ui
    :commands lsp-ui-mode)
  (use-package company-lsp
    :commands company-lsp
    :config
    (add-to-list 'company-backends 'company-lsp))
#+END_SRC
